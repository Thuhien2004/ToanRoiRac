<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Dijkstra's Algorithm - Visualizing Shortest Paths</title>
<script src="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/vis/4.21.0/vis.min.css" rel="stylesheet" type="text/css">
<style>
  #graph-container {
    width: 800px;
    height: 600px;
    border: 1px solid lightgray;
  }
</style>
</head>
<body>
<div id="graph-container"></div>

<script>
// Dijkstra's algorithm to find the shortest path from a source node to all other nodes
function dijkstra(graph, source) {
    const INF = Number.MAX_SAFE_INTEGER;
    const n = graph.length;
    const dist = new Array(n).fill(INF);
    const visited = new Array(n).fill(false);
    const path = new Array(n).fill(null);

    dist[source] = 0;

    for (let i = 0; i < n - 1; i++) {
        const u = minDistance(dist, visited);
        visited[u] = true;

        for (let v = 0; v < n; v++) {
            if (!visited[v] && graph[u][v] !== 0 && dist[u] !== INF && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
                path[v] = u;
            }
        }
    }

    return { distances: dist, path: path };
}

function minDistance(dist, visited) {
    let min = Number.MAX_SAFE_INTEGER;
    let minIndex = -1;

    for (let v = 0; v < dist.length; v++) {
        if (!visited[v] && dist[v] <= min) {
            min = dist[v];
            minIndex = v;
        }
    }

    return minIndex;
}

// Example graph
const graph = [
    [0, 4, 0, 0, 0, 0, 0, 8, 0],
    [4, 0, 8, 0, 0, 0, 0, 11, 0],
    [0, 8, 0, 7, 0, 4, 0, 0, 2],
    [0, 0, 7, 0, 9, 14, 0, 0, 0],
    [0, 0, 0, 9, 0, 10, 0, 0, 0],
    [0, 0, 4, 14, 10, 0, 2, 0, 0],
    [0, 0, 0, 0, 0, 2, 0, 1, 6],
    [8, 11, 0, 0, 0, 0, 1, 0, 7],
    [0, 0, 2, 0, 0, 0, 6, 7, 0]
];

const source = 0;
const { distances, path } = dijkstra(graph, source);

// Visualization using Vis.js
const nodes = [];
const edges = [];

for (let i = 0; i < graph.length; i++) {
    nodes.push({ id: i, label: i.toString() });
    if (i !== source && distances[i] !== Number.MAX_SAFE_INTEGER) {
        edges.push({ from: source, to: i, label: distances[i].toString(), color: { color: 'blue' } });
        let prev = i;
        while (path[prev] !== null) {
            edges.push({ from: path[prev], to: prev, color: { color: 'blue' } });
            prev = path[prev];
        }
    }
}

const container = document.getElementById('graph-container');
const data = {
    nodes: nodes,
    edges: edges
};
const options = {};
const network = new vis.Network(container, data, options);
</script>
</body>
</html>
